{"version":3,"file":"adddayslot.min.js","sources":["../src/adddayslot.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/.\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * @package\r\n * @subpackage organizer\r\n * @copyright 2020 Thomas Niedermaier (thomas.niedermaier@gmail.com)\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/**\r\n * Create new dayslots\r\n */\r\n\r\n\r\ndefine(\r\n    ['jquery', 'core/log'], function($) {\r\n\r\n        /**\r\n         * @constructor\r\n         * @alias module:mod_organizer/adddayslot\r\n         */\r\n        var Adddayslot = function() {\r\n\r\n            this.totalslots = 0;\r\n            this.displayallslots = 0;\r\n            this.totalday = \"\";\r\n            this.totaltotal = \"\";\r\n            this.current = \"0\";\r\n        };\r\n\r\n        var instance = new Adddayslot();\r\n\r\n        instance.init = function(param) {\r\n\r\n            instance.totalslots = param.totalslots; // Initial maximum of days (despite only one is displayed).\r\n            instance.displayallslots = param.displayallslots; // Whether to display all days so far generated.\r\n            instance.totalday = param.totalday; // String for new slots amount status message for a day.\r\n            instance.totaltotal = param.totaltotal; // String for new slots amount total status message.\r\n            instance.relativedeadline = param.relativedeadline; // Relative deadline for slot registrations in seconds.\r\n            instance.relativedeadlinestring = param.relativedeadlinestring; // String warning message if slots had\r\n            // not been created due to registration deadline. \"xxx\" is replaced by the number of not created slots.\r\n            instance.allowcreationofpasttimeslots = param.allowcreationofpasttimeslots;// Deadline for registrations(s).\r\n            instance.pasttimeslotsstring = param.pasttimeslotsstring; // String warning message if slots had\r\n\r\n            if (!instance.displayallslots == 0) { // So the form is loaded with new slots to fill in.\r\n\r\n                instance.current = instance.totalslots;\r\n                evaluateallrows();\r\n            }\r\n\r\n            // If a new slot field is changed evaluate the row to provide the forecast.\r\n            $('[name^=\"newslots\"]').not(':checkbox').on('change', startevaluation);\r\n\r\n            // After relevant input is changed recalculate the forecasts.\r\n            $('input[name^=\"duration\"]').on('change', evaluateallrows);\r\n            $('select[name^=\"duration\"]').on('change', evaluateallrows);\r\n            $('input[name^=\"gap\"]').on('change', evaluateallrows);\r\n            $('select[name^=\"gap\"]').on('change', evaluateallrows);\r\n            $('input[name=\"maxparticipants\"]').on('change', evaluateallrows);\r\n            $('select[name^=\"startdate\"]').on('change', evaluateallrows);\r\n            $('select[name^=\"enddate\"]').on('change', evaluateallrows);\r\n\r\n            // If apply period starts now deactivate apply date in form.\r\n            if ($(\"#id_now\").prop(\"checked\") == true) {\r\n                $('[name^=availablefrom]').prop(\"disabled\", true);\r\n                $('#id_availablefrom_timeunit').prop(\"disabled\", true);\r\n            }\r\n\r\n            /**\r\n             * Get index of changed row and start evaluation.\r\n             *\r\n             * @param {number} e Index of row\r\n             */\r\n            function startevaluation(e) {\r\n                var name = $(e.target).attr(\"name\");\r\n                var i = parseInt(name.replace('newslots[', ''));\r\n                var valdayfrom = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[day\\]']\").val());\r\n                var valdayto = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[dayto\\]']\").val());\r\n                var valfrom = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[fromh\\]']\").val()) +\r\n                    parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[fromm\\]']\").val());\r\n                // Proposal for to-date's time when from-date's time has been changed.\r\n                if (valdayfrom != -1) {\r\n                    var periodstartdate = getstartdate();\r\n                    var periodenddate = getenddate();\r\n                    for (var daydate = periodstartdate; daydate <= periodenddate; daydate = addDays(daydate * 1000, 1)) {\r\n                        var jsdaydate = new Date(daydate * 1000);\r\n                        var iday = jsdaydate.getDay();\r\n                        var iweekday = iday ? (iday - 1) : 6;\r\n                        if (valdayfrom == iweekday) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    var pdate = (jsdaydate / 1000) + valfrom + getduration();\r\n                    var jspdate = new Date(pdate * 1000);\r\n                    var pday = jspdate.getDay();\r\n                    var pweekday = pday ? (pday - 1) : 6;\r\n                    $(\"select[name='newslots\\[\" + i + \"\\]\\[dayto\\]']\").val(pweekday);\r\n                    valdayto = pweekday;\r\n                    var hours = jspdate.getHours();\r\n                    var minutes = jspdate.getMinutes();\r\n                    minutes = minutes % 5 ? minutes + (5 - (minutes % 5)) : minutes;\r\n                    var pseconds = minutes * 60;\r\n                    $(\"select[name='newslots\\[\" + i + \"\\]\\[toh\\]']\").val(hours * 3600);\r\n                    $(\"select[name='newslots\\[\" + i + \"\\]\\[tom\\]']\").val(pseconds);\r\n                }\r\n                if (valdayfrom != -1 && valdayto != -1) {\r\n                    evaluaterow(i);\r\n                } else {\r\n                    resetrowevaluation(i);\r\n                }\r\n                writetotal();\r\n            }\r\n\r\n            /**\r\n             * Evaluate a certain row to make forecast.\r\n             *\r\n             * @param {number} i Index of row\r\n             */\r\n            function evaluaterow(i) {\r\n                var howmanyslots = getslots(i);\r\n                var slots = howmanyslots[0];\r\n                var slotsnotcreatedduetodeadline = howmanyslots[1];\r\n                var slotsnotcreatedduetopasttime = howmanyslots[2];\r\n                var pax = getpax();\r\n                pax = pax * slots;\r\n                var forecaststring = instance.totalday.replace(\"xxx\", slots.toString()).replace(\"yyy\", pax.toString());\r\n                if (slotsnotcreatedduetodeadline > 0) {\r\n                    forecaststring += \" (\" + instance.relativedeadlinestring.replace(\"xxx\",\r\n                        slotsnotcreatedduetodeadline.toString()) + \")\";\r\n                }\r\n                if (slotsnotcreatedduetopasttime > 0) {\r\n                    forecaststring += \" (\" + instance.pasttimeslotsstring.replace(\"xxx\",\r\n                        slotsnotcreatedduetopasttime.toString()) + \")\";\r\n                }\r\n                $(\"span[name='forecastday_\" + i + \"']\").html(forecaststring);\r\n                $(\"span[name='newslots_\" + i + \"']\").html(slots.toString());\r\n                $(\"span[name='newpax_\" + i + \"']\").html(pax.toString());\r\n            }\r\n\r\n            /**\r\n             * Set row evaluation to zero.\r\n             *\r\n             * @param {number} i Index of row\r\n             */\r\n            function resetrowevaluation(i) {\r\n                var slots = 0;\r\n                var pax = 0;\r\n                var forecaststring = instance.totalday.replace(\"xxx\", slots.toString()).replace(\"yyy\", pax.toString());\r\n                $(\"span[name='forecastday_\" + i + \"']\").html(forecaststring);\r\n                $(\"span[name='newslots_\" + i + \"']\").html(slots.toString());\r\n                $(\"span[name='newpax_\" + i + \"']\").html(pax.toString());\r\n            }\r\n\r\n            /**\r\n             * Reevaluate all rows and write the totals.\r\n             */\r\n            function evaluateallrows() {\r\n                for (var i = 0; i < instance.current; i++) {\r\n                    evaluaterow(i);\r\n                }\r\n                writetotal();\r\n            }\r\n\r\n            /**\r\n             * Get amount of slots of row i.\r\n             *\r\n             * @param {number} i Index of row\r\n             * @returns {array} returnvalues slots, slotsnotcreated1, slotsnotcreated2\r\n             */\r\n            function getslots(i) {\r\n                // No selected day-from: return 0.\r\n                var dayfromvalue = parseInt($(\"select[name^='newslots\\[\" + i + \"\\]\\[day\\]']\").val());\r\n                if (dayfromvalue == -1) {\r\n                    return 0;\r\n                }\r\n                // No selected day to: return 0.\r\n                var daytovalue = parseInt($(\"select[name^='newslots\\[\" + i + \"\\]\\[dayto\\]']\").val());\r\n                if (daytovalue == -1) {\r\n                    return 0;\r\n                }\r\n                // Get period, time from, slot duration and gap between slots.\r\n                var periodstartdate = getstartdate();\r\n                var periodenddate = getenddate();\r\n                var valfrom = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[fromh\\]']\").val()) +\r\n                    parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[fromm\\]']\").val());\r\n                var valto = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[toh\\]']\").val()) +\r\n                    parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[tom\\]']\").val());\r\n                // Duration + gap in seconds.\r\n                var duration = getduration();\r\n                var iteration = duration + getgap();\r\n                var iweekday, daydate, jsdaydate, datefrom, dateto, itime;\r\n                var slots = 0;\r\n                var slotsnotcreatedduetodeadline = 0;\r\n                var slotsnotcreatedduetopasttime = 0;\r\n                // Iterate through days of period.\r\n                for (daydate = periodstartdate; daydate <= periodenddate; daydate = addDays(daydate * 1000, 1)) {\r\n                    jsdaydate = new Date(daydate * 1000);\r\n                    iweekday = jsdaydate.getDay() ? (jsdaydate.getDay() - 1) : 6;\r\n                    if (dayfromvalue != iweekday) {\r\n                        continue;\r\n                    }\r\n                    datefrom = daydate + valfrom;\r\n                    dateto = daydate + ((daytovalue - dayfromvalue) * 86400) + valto;\r\n                    while (dateto < datefrom) {\r\n                        dateto += (7 * 86400);\r\n                    }\r\n                    // New: Slot overlapping period end date is allowed!\r\n                    if (datefrom < periodstartdate || datefrom > periodenddate) {\r\n                        continue;\r\n                    }\r\n                    var now = new Date();\r\n                    var date = now.getTime() / 1000;\r\n                    for (itime = datefrom; itime + duration <= dateto; itime += iteration) {\r\n                        if (itime - date < instance.relativedeadline && itime - date > 0) {\r\n                            slotsnotcreatedduetodeadline++;\r\n                        } else if (itime - date < 0 && instance.allowcreationofpasttimeslots == 0) {\r\n                            slotsnotcreatedduetopasttime++;\r\n                        } else {\r\n                            slots++;\r\n                        }\r\n                    }\r\n                }\r\n                var returnvalues = [slots, slotsnotcreatedduetodeadline, slotsnotcreatedduetopasttime];\r\n                return returnvalues;\r\n            }\r\n\r\n            /**\r\n             * Get max amount of participants of this slot.\r\n             * @return {int} pax\r\n             */\r\n            function getpax() {\r\n                var pax = $('input[name=maxparticipants]').val();\r\n                if ($.isNumeric(pax)) {\r\n                    return pax;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Write out overall sums of forecast bookings.\r\n             */\r\n            function writetotal() {\r\n                var totalslots = 0;\r\n                var totalpax = 0;\r\n                $(\"span[name^='newslots_']\").each(function() {\r\n                    var slots = parseInt($(this).html());\r\n                    if (isNaN(slots) == false) {\r\n                        totalslots += slots;\r\n                    }\r\n                });\r\n                $(\"span[name^='newpax_']\").each(function() {\r\n                    var pax = parseInt($(this).html());\r\n                    if (isNaN(pax) == false) {\r\n                        totalpax += pax;\r\n                    }\r\n                });\r\n                var forecaststring = instance.totaltotal.replace(\"xxx\", totalslots.toString()).replace(\"yyy\", totalpax.toString());\r\n                $(\"div[name='organizer_newslots_forecasttotal']\").html(forecaststring);\r\n            }\r\n\r\n            /**\r\n             * Get the startdate for the series of dates.\r\n             * @return {number}\r\n             */\r\n            function getstartdate() {\r\n                var startdateday = $(\"select[name='startdate\\[day\\]']\").val();\r\n                var startdatemonth = $(\"select[name='startdate\\[month\\]']\").val() - 1;\r\n                var startdateyear = $(\"select[name='startdate\\[year\\]']\").val();\r\n                var startdatedate = new Date(startdateyear, startdatemonth, startdateday);\r\n                return startdatedate.getTime() / 1000;\r\n            }\r\n\r\n            /**\r\n             * Get the enddate for the series of dates.\r\n             * @return {number}\r\n             */\r\n            function getenddate() {\r\n                var enddateday = $(\"select[name='enddate\\[day\\]']\").val();\r\n                var enddatemonth = $(\"select[name='enddate\\[month\\]']\").val() - 1;\r\n                var enddateyear = $(\"select[name='enddate\\[year\\]']\").val();\r\n                var enddatedate = new Date(enddateyear, enddatemonth, enddateday);\r\n                return enddatedate.getTime() / 1000 + 86399; // Include last day of period.\r\n            }\r\n\r\n            /**\r\n             * Get the duration of a slot.\r\n             * @return {number} in seconds\r\n             */\r\n            function getduration() {\r\n                var durationnumber = parseInt($(\"input[name='duration\\[number\\]']\").val());\r\n                var durationtimeunit = parseInt($(\"select[name='duration\\[timeunit\\]']\").val());\r\n                if (isNaN(durationnumber)) {\r\n                    return 0;\r\n                }\r\n                // Duration in seconds.\r\n                var duration = durationnumber * durationtimeunit;\r\n                return duration;\r\n            }\r\n\r\n            /**\r\n             * Get the gap between the dates, if any.\r\n             * @return {number} in seconds\r\n             */\r\n            function getgap() {\r\n                var gapnumber = parseInt($(\"input[name='gap\\[number\\]']\").val());\r\n                var gaptimeunit = parseInt($(\"select[name='gap\\[timeunit\\]']\").val());\r\n                if (isNaN(gapnumber)) {\r\n                    gapnumber = 0;\r\n                }\r\n                // Gap in seconds.\r\n                var gap = gapnumber * gaptimeunit;\r\n                return gap;\r\n            }\r\n\r\n            /**\r\n             * Function to add a day to a given date.\r\n             * @param {string} date to add a day to\r\n             * @param { number } days to add to the date\r\n             * @return {number} the new date\r\n             */\r\n            function addDays(date, days) {\r\n                var result = new Date(date);\r\n                result.setDate(result.getDate() + days);\r\n                return result.getTime() / 1000;\r\n            }\r\n\r\n        };\r\n\r\n        return instance;\r\n\r\n    });"],"names":["define","$","instance","totalslots","displayallslots","totalday","totaltotal","current","init","param","evaluaterow","i","howmanyslots","getslots","dayfromvalue","parseInt","val","daytovalue","periodstartdate","daydate","jsdaydate","datefrom","dateto","itime","getstartdate","periodenddate","getenddate","valfrom","valto","duration","getduration","iteration","gapnumber","gaptimeunit","isNaN","getgap","slots","slotsnotcreatedduetodeadline","slotsnotcreatedduetopasttime","addDays","Date","getDay","date","getTime","relativedeadline","allowcreationofpasttimeslots","pax","isNumeric","getpax","forecaststring","replace","toString","relativedeadlinestring","pasttimeslotsstring","html","evaluateallrows","writetotal","totalpax","each","this","startdateday","startdatemonth","startdateyear","enddateday","enddatemonth","enddateyear","durationnumber","durationtimeunit","days","result","setDate","getDate","not","on","startevaluation","e","name","target","attr","valdayfrom","valdayto","iday","pdate","jspdate","pday","pweekday","hours","getHours","minutes","getMinutes","pseconds","resetrowevaluation","prop"],"mappings":"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"}