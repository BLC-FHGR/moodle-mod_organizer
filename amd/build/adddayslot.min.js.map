{"version":3,"file":"adddayslot.min.js","sources":["../src/adddayslot.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/.\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * @package\r\n * @subpackage organizer\r\n * @copyright 2020 Thomas Niedermaier (thomas.niedermaier@gmail.com)\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/**\r\n * Create new dayslots\r\n */\r\n\r\n\r\ndefine(\r\n    ['jquery'], function($) {\r\n\r\n        /**\r\n         * @constructor\r\n         * @alias module:mod_organizer/adddayslot\r\n         */\r\n        var Adddayslot = function() {\r\n\r\n            this.totalslots = 0;\r\n            this.displayallslots = 0;\r\n            this.totalday = \"\";\r\n            this.totaltotal = \"\";\r\n            this.current = \"0\";\r\n        };\r\n\r\n        var instance = new Adddayslot();\r\n\r\n        instance.init = function(param) {\r\n\r\n            instance.totalslots = param.totalslots; // Initial maximum of days (despite only one is displayed).\r\n            instance.displayallslots = param.displayallslots; // Whether to display all days so far generated.\r\n            instance.totalday = param.totalday; // String for new slots amount status message for a day.\r\n            instance.totaltotal = param.totaltotal; // String for new slots amount total status message.\r\n            instance.relativedeadline = param.relativedeadline; // Relative deadline for slot registrations in seconds.\r\n            instance.relativedeadlinestring = param.relativedeadlinestring; /* String warning message if slots had\r\n            not been created due to registration deadline. \"xxx\" is replaced by the number of not created slots. */\r\n            instance.allowcreationofpasttimeslots = param.allowcreationofpasttimeslots;// Deadline for registrations(s).\r\n            instance.pasttimeslotsstring = param.pasttimeslotsstring; // String warning message if slots had\r\n\r\n            if (instance.displayallslots == 0) { // So the form is loaded initially.\r\n\r\n                // Hide all days except the first one.\r\n                for (var i = instance.totalslots - 1; i > 0; i--) {\r\n                    if ($('#id_newslots_' + String(i) + '_day').val() == -1) {\r\n                        $(\"#id_newslots_\" + String(i) + \"_day\").closest(\".form-group.row.fitem\").hide(); // Boost-theme.\r\n                        $(\"#fgroup_id_slotgroup\" + String(i)).hide(); // Clean-theme.\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                // As long as not all slots are visible hide the add day button.\r\n                if (i < instance.totalslots - 1) {\r\n                    $('#id_addday').hide();\r\n                }\r\n\r\n            } else {\r\n                instance.current = instance.totalslots;\r\n                evaluateallrows();\r\n            }\r\n\r\n            // If a new slot field is changed evaluate the row to provide the forecast.\r\n            $('[name^=\"newslots\"]').not(':checkbox').on('change', startevaluation);\r\n\r\n            // After relevant input is changed recalculate the forecasts.\r\n            $('input[name^=\"duration\"]').on('change', evaluateallrows);\r\n            $('select[name^=\"duration\"]').on('change', evaluateallrows);\r\n            $('input[name^=\"gap\"]').on('change', evaluateallrows);\r\n            $('select[name^=\"gap\"]').on('change', evaluateallrows);\r\n            $('input[name=\"maxparticipants\"]').on('change', evaluateallrows);\r\n            $('select[name^=\"startdate\"]').on('change', evaluateallrows);\r\n            $('select[name^=\"enddate\"]').on('change', evaluateallrows);\r\n\r\n            // If apply period starts now deactivate apply date in form.\r\n            if ($(\"#id_now\").prop(\"checked\") == true) {\r\n                $('[name^=availablefrom]').prop(\"disabled\", true);\r\n                $('#id_availablefrom_timeunit').prop(\"disabled\", true);\r\n            }\r\n\r\n            /**\r\n             * Get index of changed row and start evaluation.\r\n             *\r\n             * @param {object} e event of changed row element\r\n             */\r\n            function startevaluation(e) {\r\n                var name = $(e.target).attr(\"name\");\r\n                var i = parseInt(name.replace('newslots[', ''));\r\n                var valdayfrom = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[day\\]']\").val());\r\n                var valdayto = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[dayto\\]']\").val());\r\n                var valfrom = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[fromh\\]']\").val()) +\r\n                    parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[fromm\\]']\").val());\r\n                // Proposal for to-date's time when from-date's time has been changed.\r\n                if (valdayfrom != -1 && name.indexOf('dayto') == -1 && name.indexOf('toh') == -1 && name.indexOf('tom') == -1) {\r\n                    var periodstartdate = getstartdate();\r\n                    var periodenddate = getenddate();\r\n                    for (var daydate = periodstartdate; daydate <= periodenddate; daydate = addDays(daydate * 1000, 1)) {\r\n                        var jsdaydate = new Date(daydate * 1000);\r\n                        var iday = jsdaydate.getDay();\r\n                        var iweekday = iday ? (iday - 1) : 6;\r\n                        if (valdayfrom == iweekday) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    var pdate = (jsdaydate / 1000) + valfrom + getduration();\r\n                    var jspdate = new Date(pdate * 1000);\r\n                    var pday = jspdate.getDay();\r\n                    var pweekday = pday ? (pday - 1) : 6;\r\n                    $(\"select[name='newslots\\[\" + i + \"\\]\\[dayto\\]']\").val(pweekday);\r\n                    valdayto = pweekday;\r\n                    var hours = jspdate.getHours();\r\n                    var minutes = jspdate.getMinutes();\r\n                    minutes = minutes % 5 ? minutes + (5 - (minutes % 5)) : minutes;\r\n                    var pseconds = minutes * 60;\r\n                    $(\"select[name='newslots\\[\" + i + \"\\]\\[toh\\]']\").val(hours * 3600);\r\n                    $(\"select[name='newslots\\[\" + i + \"\\]\\[tom\\]']\").val(pseconds);\r\n                }\r\n                if (valdayfrom != -1 && valdayto != -1) {\r\n                    evaluaterow(i);\r\n                    shownextnewslot(i);\r\n                } else {\r\n                    resetrowevaluation(i);\r\n                }\r\n                writetotal();\r\n            }\r\n\r\n            /**\r\n             * Evaluate a certain row to make forecast.\r\n             *\r\n             * @param {number} i Index of row\r\n             */\r\n            function evaluaterow(i) {\r\n                var howmanyslots = getslots(i);\r\n                var slots = howmanyslots[0];\r\n                var slotsnotcreatedduetodeadline = howmanyslots[1];\r\n                var slotsnotcreatedduetopasttime = howmanyslots[2];\r\n                var pax = getpax();\r\n                pax = pax * slots;\r\n                var forecaststring = instance.totalday.replace(\"xxx\", slots.toString()).replace(\"yyy\", pax.toString());\r\n                if (slotsnotcreatedduetodeadline > 0) {\r\n                    forecaststring += \" (\" + instance.relativedeadlinestring.replace(\"xxx\",\r\n                        slotsnotcreatedduetodeadline.toString()) + \")\";\r\n                }\r\n                if (slotsnotcreatedduetopasttime > 0) {\r\n                    forecaststring += \" (\" + instance.pasttimeslotsstring.replace(\"xxx\",\r\n                        slotsnotcreatedduetopasttime.toString()) + \")\";\r\n                }\r\n                $(\"span[name='forecastday_\" + i + \"']\").html(forecaststring);\r\n                $(\"span[name='newslots_\" + i + \"']\").html(slots.toString());\r\n                $(\"span[name='newpax_\" + i + \"']\").html(pax.toString());\r\n            }\r\n\r\n            /**\r\n             * Set row evaluation to zero.\r\n             *\r\n             * @param {number} i Index of row\r\n             */\r\n            function resetrowevaluation(i) {\r\n                var slots = 0;\r\n                var pax = 0;\r\n                var forecaststring = instance.totalday.replace(\"xxx\", slots.toString()).replace(\"yyy\", pax.toString());\r\n                $(\"span[name='forecastday_\" + i + \"']\").html(forecaststring);\r\n                $(\"span[name='newslots_\" + i + \"']\").html(slots.toString());\r\n                $(\"span[name='newpax_\" + i + \"']\").html(pax.toString());\r\n            }\r\n\r\n            /**\r\n             * Reevaluate all rows and write the totals.\r\n             */\r\n            function evaluateallrows() {\r\n                for (var i = 0; i < instance.current; i++) {\r\n                    evaluaterow(i);\r\n                }\r\n                writetotal();\r\n            }\r\n\r\n            /**\r\n             * Get amount of slots of row i.\r\n             *\r\n             * @param {number} i Index of row\r\n             * @returns {array} returnvalues slots, slotsnotcreated1, slotsnotcreated2\r\n             */\r\n            function getslots(i) {\r\n                // No selected day-from: return 0.\r\n                var dayfromvalue = parseInt($(\"select[name^='newslots\\[\" + i + \"\\]\\[day\\]']\").val());\r\n                if (dayfromvalue == -1) {\r\n                    return [0, 0, 0];\r\n                }\r\n                // No selected day to: return 0.\r\n                var daytovalue = parseInt($(\"select[name^='newslots\\[\" + i + \"\\]\\[dayto\\]']\").val());\r\n                if (daytovalue == -1) {\r\n                    return [0, 0, 0];\r\n                }\r\n                // Get period, time from, slot duration and gap between slots.\r\n                var periodstartdate = getstartdate();\r\n                var periodenddate = getenddate();\r\n                var valfrom = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[fromh\\]']\").val()) +\r\n                    parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[fromm\\]']\").val());\r\n                var valto = parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[toh\\]']\").val()) +\r\n                    parseInt($(\"select[name='newslots\\[\" + i + \"\\]\\[tom\\]']\").val());\r\n                // Duration + gap in seconds.\r\n                var duration = getduration();\r\n                var iteration = duration + getgap();\r\n                var iweekday, daydate, jsdaydate, datefrom, dateto, itime;\r\n                var slots = 0;\r\n                var slotsnotcreatedduetodeadline = 0;\r\n                var slotsnotcreatedduetopasttime = 0;\r\n                // Iterate through days of period.\r\n                for (daydate = periodstartdate; daydate <= periodenddate; daydate = addDays(daydate * 1000, 1)) {\r\n                    jsdaydate = new Date(daydate * 1000);\r\n                    iweekday = jsdaydate.getDay() ? (jsdaydate.getDay() - 1) : 6;\r\n                    if (dayfromvalue != iweekday) {\r\n                        continue;\r\n                    }\r\n                    datefrom = daydate + valfrom;\r\n                    dateto = daydate + ((daytovalue - dayfromvalue) * 86400) + valto;\r\n                    while (dateto < datefrom) {\r\n                        dateto += (7 * 86400);\r\n                    }\r\n                    // New: Slot overlapping period end date is allowed!\r\n                    if (datefrom < periodstartdate || datefrom > periodenddate) {\r\n                        continue;\r\n                    }\r\n                    var now = new Date();\r\n                    var date = now.getTime() / 1000;\r\n                    dateto = periodenddate < dateto ? periodenddate : dateto;\r\n                    for (itime = datefrom; itime + duration <= dateto; itime += iteration) {\r\n                        if (itime - date < instance.relativedeadline && itime - date > 0) {\r\n                            slotsnotcreatedduetodeadline++;\r\n                        } else if (itime - date < 0 && instance.allowcreationofpasttimeslots == 0) {\r\n                            slotsnotcreatedduetopasttime++;\r\n                        } else {\r\n                            slots++;\r\n                        }\r\n                    }\r\n                }\r\n                var returnvalues = [slots, slotsnotcreatedduetodeadline, slotsnotcreatedduetopasttime];\r\n                return returnvalues;\r\n            }\r\n\r\n            /**\r\n             * Get max amount of participants of this slot.\r\n             * @return {int} pax\r\n             */\r\n            function getpax() {\r\n                var pax = $('input[name=maxparticipants]').val();\r\n                if ($.isNumeric(pax)) {\r\n                    return pax;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Write out overall sums of forecast bookings.\r\n             */\r\n            function writetotal() {\r\n                var totalslots = 0;\r\n                var totalpax = 0;\r\n                $(\"span[name^='newslots_']\").each(function() {\r\n                    var slots = parseInt($(this).html());\r\n                    if (isNaN(slots) == false) {\r\n                        totalslots += slots;\r\n                    }\r\n                });\r\n                $(\"span[name^='newpax_']\").each(function() {\r\n                    var pax = parseInt($(this).html());\r\n                    if (isNaN(pax) == false) {\r\n                        totalpax += pax;\r\n                    }\r\n                });\r\n                var forecaststring = instance.totaltotal.replace(\"xxx\", totalslots.toString()).replace(\"yyy\", totalpax.toString());\r\n                $(\"div[name='organizer_newslots_forecasttotal']\").html(forecaststring);\r\n            }\r\n\r\n            /**\r\n             * Get the startdate for the series of dates.\r\n             * @return {number}\r\n             */\r\n            function getstartdate() {\r\n                var startdateday = $(\"select[name='startdate\\[day\\]']\").val();\r\n                var startdatemonth = $(\"select[name='startdate\\[month\\]']\").val() - 1;\r\n                var startdateyear = $(\"select[name='startdate\\[year\\]']\").val();\r\n                var startdatedate = new Date(startdateyear, startdatemonth, startdateday);\r\n                return startdatedate.getTime() / 1000;\r\n            }\r\n\r\n            /**\r\n             * Get the enddate for the series of dates.\r\n             * @return {number}\r\n             */\r\n            function getenddate() {\r\n                var enddateday = $(\"select[name='enddate\\[day\\]']\").val();\r\n                var enddatemonth = $(\"select[name='enddate\\[month\\]']\").val() - 1;\r\n                var enddateyear = $(\"select[name='enddate\\[year\\]']\").val();\r\n                var enddatedate = new Date(enddateyear, enddatemonth, enddateday);\r\n                return enddatedate.getTime() / 1000 + 86400; // Include last day of period.\r\n            }\r\n\r\n            /**\r\n             * Get the duration of a slot.\r\n             * @return {number} in seconds\r\n             */\r\n            function getduration() {\r\n                var durationnumber = parseInt($(\"input[name='duration\\[number\\]']\").val());\r\n                var durationtimeunit = parseInt($(\"select[name='duration\\[timeunit\\]']\").val());\r\n                if (isNaN(durationnumber)) {\r\n                    return 0;\r\n                }\r\n                // Duration in seconds.\r\n                var duration = durationnumber * durationtimeunit;\r\n                return duration;\r\n            }\r\n\r\n            /**\r\n             * Get the gap between the dates, if any.\r\n             * @return {number} in seconds\r\n             */\r\n            function getgap() {\r\n                var gapnumber = parseInt($(\"input[name='gap\\[number\\]']\").val());\r\n                var gaptimeunit = parseInt($(\"select[name='gap\\[timeunit\\]']\").val());\r\n                if (isNaN(gapnumber)) {\r\n                    gapnumber = 0;\r\n                }\r\n                // Gap in seconds.\r\n                var gap = gapnumber * gaptimeunit;\r\n                return gap;\r\n            }\r\n\r\n            /**\r\n             * Function to add a day to a given date.\r\n             * @param {string} date to add a day to\r\n             * @param { number } days to add to the date\r\n             * @return {number} the new date\r\n             */\r\n            function addDays(date, days) {\r\n                var result = new Date(date);\r\n                result.setDate(result.getDate() + days);\r\n                return result.getTime() / 1000;\r\n            }\r\n\r\n            /**\r\n             * Function to add a day to a given date.\r\n             * @param {string} id contains the index of the current slot\r\n             */\r\n            function shownextnewslot(id) {\r\n                // As soon as a to time is edited, display the next day.\r\n                let nextindex = parseInt(id) + 1;\r\n                if (nextindex > instance.current) {\r\n                    $(\"#id_newslots_\" + String(nextindex) + \"_day\").closest(\".form-group.row.fitem\").show(); // Boost-theme.\r\n                    $(\"#fgroup_id_slotgroup\" + String(nextindex)).show(); // Clean-theme.\r\n                    if (nextindex == instance.totalslots) {\r\n                        $('#id_addday').show();\r\n                    }\r\n                    instance.current++;\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        return instance;\r\n\r\n    });"],"names":["define","$","instance","totalslots","displayallslots","totalday","totaltotal","current","init","param","relativedeadline","relativedeadlinestring","allowcreationofpasttimeslots","pasttimeslotsstring","i","String","val","closest","hide","evaluateallrows","evaluaterow","howmanyslots","dayfromvalue","parseInt","daytovalue","daydate","jsdaydate","datefrom","dateto","itime","periodstartdate","getstartdate","periodenddate","getenddate","valfrom","valto","duration","getduration","iteration","gapnumber","gaptimeunit","isNaN","getgap","slots","slotsnotcreatedduetodeadline","slotsnotcreatedduetopasttime","addDays","Date","getDay","date","getTime","getslots","pax","isNumeric","getpax","forecaststring","replace","toString","html","writetotal","totalpax","each","this","startdateday","startdatemonth","startdateyear","enddateday","enddatemonth","enddateyear","durationnumber","durationtimeunit","days","result","setDate","getDate","not","on","e","name","target","attr","valdayfrom","valdayto","indexOf","iday","pdate","jspdate","pday","pweekday","hours","getHours","minutes","getMinutes","pseconds","id","nextindex","show","shownextnewslot","resetrowevaluation","prop"],"mappings":"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"}